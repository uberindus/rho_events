version: "3.7"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: gunicorn django_app.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - django_static_volume:/home/app/web/static
      - media:/home/app/web/media
      - django_errors_logs:/home/app/web/logs
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:13.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    volumes:
      - react_static_volume/:/app/build
  nginx:
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    volumes:
      - django_static_volume:/usr/share/nginx/django_files/static
      - media:/usr/share/nginx/media
      - react_static_volume:/usr/share/nginx/react
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    ports:
      - 80:80
    depends_on:
      - backend
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  media:
  react_static_volume:
  django_static_volume:
  django_errors_logs:
